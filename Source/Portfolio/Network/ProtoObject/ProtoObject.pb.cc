// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoObject.proto

#include "ProtoObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ProtoObject {
PROTOBUF_CONSTEXPR LoginInfo::LoginInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginInfoDefaultTypeInternal() {}
  union {
    LoginInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginInfoDefaultTypeInternal _LoginInfo_default_instance_;
PROTOBUF_CONSTEXPR GameItem::GameItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_.num_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameItemDefaultTypeInternal() {}
  union {
    GameItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameItemDefaultTypeInternal _GameItem_default_instance_;
PROTOBUF_CONSTEXPR TypeInventory::TypeInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TypeInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeInventoryDefaultTypeInternal() {}
  union {
    TypeInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeInventoryDefaultTypeInternal _TypeInventory_default_instance_;
PROTOBUF_CONSTEXPR Inventory::Inventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.typeinventory_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryDefaultTypeInternal() {}
  union {
    Inventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryDefaultTypeInternal _Inventory_default_instance_;
PROTOBUF_CONSTEXPR QuestStatus_SubQuestStatus::QuestStatus_SubQuestStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.bstarted_)*/false
  , /*decltype(_impl_.bcompleted_)*/false
  , /*decltype(_impl_.curramount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuestStatus_SubQuestStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuestStatus_SubQuestStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuestStatus_SubQuestStatusDefaultTypeInternal() {}
  union {
    QuestStatus_SubQuestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuestStatus_SubQuestStatusDefaultTypeInternal _QuestStatus_SubQuestStatus_default_instance_;
PROTOBUF_CONSTEXPR QuestStatus::QuestStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.substatus_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.progresstype_)*/0
  , /*decltype(_impl_.currphase_)*/0u
  , /*decltype(_impl_.completed_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuestStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuestStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuestStatusDefaultTypeInternal() {}
  union {
    QuestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuestStatusDefaultTypeInternal _QuestStatus_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queststatus_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inventory_)*/nullptr
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.map_)*/0u
  , /*decltype(_impl_.loc_x_)*/0
  , /*decltype(_impl_.loc_y_)*/0
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.useridx_)*/uint64_t{0u}
  , /*decltype(_impl_.loc_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR Nickname::Nickname(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NicknameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NicknameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NicknameDefaultTypeInternal() {}
  union {
    Nickname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NicknameDefaultTypeInternal _Nickname_default_instance_;
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.useridx_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR RepBoolean::RepBoolean(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.useridx_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.boolean_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RepBooleanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepBooleanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepBooleanDefaultTypeInternal() {}
  union {
    RepBoolean _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepBooleanDefaultTypeInternal _RepBoolean_default_instance_;
PROTOBUF_CONSTEXPR Equipment::Equipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.useridx_)*/uint64_t{0u}
  , /*decltype(_impl_.itemindex_)*/uint64_t{0u}
  , /*decltype(_impl_.equiptype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipmentDefaultTypeInternal() {}
  union {
    Equipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipmentDefaultTypeInternal _Equipment_default_instance_;
PROTOBUF_CONSTEXPR ResourceChange::ResourceChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapidx_)*/0u
  , /*decltype(_impl_.restype_)*/0
  , /*decltype(_impl_.residx_)*/uint64_t{0u}
  , /*decltype(_impl_.reschangetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceChangeDefaultTypeInternal() {}
  union {
    ResourceChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceChangeDefaultTypeInternal _ResourceChange_default_instance_;
PROTOBUF_CONSTEXPR MapTransition::MapTransition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.useridx_)*/uint64_t{0u}
  , /*decltype(_impl_.before_)*/0u
  , /*decltype(_impl_.after_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapTransitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapTransitionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapTransitionDefaultTypeInternal() {}
  union {
    MapTransition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapTransitionDefaultTypeInternal _MapTransition_default_instance_;
}  // namespace ProtoObject
static ::_pb::Metadata file_level_metadata_ProtoObject_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ProtoObject_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ProtoObject_2eproto = nullptr;

const uint32_t TableStruct_ProtoObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::LoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::LoginInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::LoginInfo, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::GameItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::GameItem, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::GameItem, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::TypeInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::TypeInventory, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::TypeInventory, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Inventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Inventory, _impl_.typeinventory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus_SubQuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus_SubQuestStatus, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus_SubQuestStatus, _impl_.bstarted_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus_SubQuestStatus, _impl_.bcompleted_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus_SubQuestStatus, _impl_.curramount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus, _impl_.progresstype_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus, _impl_.substatus_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus, _impl_.currphase_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::QuestStatus, _impl_.completed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.loc_x_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.loc_y_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.loc_z_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.inventory_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.queststatus_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::PlayerInfo, _impl_.useridx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Nickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Nickname, _impl_.nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Location, _impl_.useridx_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Location, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Location, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Location, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Location, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Location, _impl_.yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::RepBoolean, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::RepBoolean, _impl_.useridx_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::RepBoolean, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::RepBoolean, _impl_.boolean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Equipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Equipment, _impl_.useridx_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Equipment, _impl_.equiptype_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::Equipment, _impl_.itemindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::ResourceChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::ResourceChange, _impl_.mapidx_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::ResourceChange, _impl_.restype_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::ResourceChange, _impl_.reschangetype_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::ResourceChange, _impl_.residx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::MapTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProtoObject::MapTransition, _impl_.useridx_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::MapTransition, _impl_.before_),
  PROTOBUF_FIELD_OFFSET(::ProtoObject::MapTransition, _impl_.after_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ProtoObject::LoginInfo)},
  { 8, -1, -1, sizeof(::ProtoObject::GameItem)},
  { 16, -1, -1, sizeof(::ProtoObject::TypeInventory)},
  { 24, -1, -1, sizeof(::ProtoObject::Inventory)},
  { 31, -1, -1, sizeof(::ProtoObject::QuestStatus_SubQuestStatus)},
  { 41, -1, -1, sizeof(::ProtoObject::QuestStatus)},
  { 53, -1, -1, sizeof(::ProtoObject::PlayerInfo)},
  { 69, -1, -1, sizeof(::ProtoObject::Nickname)},
  { 76, -1, -1, sizeof(::ProtoObject::Location)},
  { 88, -1, -1, sizeof(::ProtoObject::RepBoolean)},
  { 97, -1, -1, sizeof(::ProtoObject::Equipment)},
  { 106, -1, -1, sizeof(::ProtoObject::ResourceChange)},
  { 116, -1, -1, sizeof(::ProtoObject::MapTransition)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ProtoObject::_LoginInfo_default_instance_._instance,
  &::ProtoObject::_GameItem_default_instance_._instance,
  &::ProtoObject::_TypeInventory_default_instance_._instance,
  &::ProtoObject::_Inventory_default_instance_._instance,
  &::ProtoObject::_QuestStatus_SubQuestStatus_default_instance_._instance,
  &::ProtoObject::_QuestStatus_default_instance_._instance,
  &::ProtoObject::_PlayerInfo_default_instance_._instance,
  &::ProtoObject::_Nickname_default_instance_._instance,
  &::ProtoObject::_Location_default_instance_._instance,
  &::ProtoObject::_RepBoolean_default_instance_._instance,
  &::ProtoObject::_Equipment_default_instance_._instance,
  &::ProtoObject::_ResourceChange_default_instance_._instance,
  &::ProtoObject::_MapTransition_default_instance_._instance,
};

const char descriptor_table_protodef_ProtoObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021ProtoObject.proto\022\013ProtoObject\032\033google"
  "/protobuf/empty.proto\")\n\tLoginInfo\022\n\n\002id"
  "\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"&\n\010GameItem\022\r\n\005"
  "index\030\001 \001(\004\022\013\n\003num\030\002 \001(\004\"C\n\rTypeInventor"
  "y\022\014\n\004type\030\001 \001(\r\022$\n\005items\030\002 \003(\0132\025.ProtoOb"
  "ject.GameItem\"k\n\tInventory\0221\n\rtypeInvent"
  "ory\030\001 \003(\0132\032.ProtoObject.TypeInventory\"+\n"
  "\010ItemType\022\t\n\005CLOTH\020\000\022\n\n\006WEAPON\020\001\022\010\n\004ITEM"
  "\020\002\"\314\004\n\013QuestStatus\022\r\n\005index\030\001 \001(\r\0220\n\004typ"
  "e\030\002 \001(\0162\".ProtoObject.QuestStatus.QuestT"
  "ype\022@\n\014progressType\030\003 \001(\0162*.ProtoObject."
  "QuestStatus.QuestProgressType\022:\n\tsubStat"
  "us\030\004 \003(\0132\'.ProtoObject.QuestStatus.SubQu"
  "estStatus\022\021\n\tcurrPhase\030\005 \001(\r\022\021\n\tcomplete"
  "d\030\006 \001(\r\032\313\001\n\016SubQuestStatus\022B\n\004type\030\001 \001(\016"
  "24.ProtoObject.QuestStatus.SubQuestStatu"
  "s.SubQuestType\022\020\n\010bStarted\030\002 \001(\010\022\022\n\nbCom"
  "pleted\030\003 \001(\010\022\022\n\ncurrAmount\030\004 \001(\r\";\n\014SubQ"
  "uestType\022\013\n\007ARRIVAL\020\000\022\010\n\004HUNT\020\001\022\010\n\004ITEM\020"
  "\002\022\n\n\006ACTION\020\003\"%\n\tQuestType\022\n\n\006SERIAL\020\000\022\014"
  "\n\010PARALLEL\020\001\"c\n\021QuestProgressType\022\017\n\013UNA"
  "VAILABLE\020\000\022\r\n\tAVAILABLE\020\001\022\016\n\nINPROGRESS\020"
  "\002\022\017\n\013COMPLETABLE\020\003\022\r\n\tCOMPLETED\020\004\"\334\001\n\nPl"
  "ayerInfo\022\014\n\004name\030\001 \001(\t\022\r\n\005level\030\002 \001(\r\022\013\n"
  "\003map\030\003 \001(\r\022\r\n\005loc_x\030\004 \001(\002\022\r\n\005loc_y\030\005 \001(\002"
  "\022\r\n\005loc_z\030\006 \001(\002\022\014\n\004gold\030\007 \001(\004\022)\n\tinvento"
  "ry\030\010 \001(\0132\026.ProtoObject.Inventory\022-\n\013ques"
  "tStatus\030\t \003(\0132\030.ProtoObject.QuestStatus\022"
  "\017\n\007userIdx\030\n \001(\004\"\034\n\010Nickname\022\020\n\010nickname"
  "\030\001 \001(\t\"X\n\010Location\022\017\n\007userIdx\030\001 \001(\004\022\t\n\001x"
  "\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\r\n\005pitch\030\005 "
  "\001(\002\022\013\n\003yaw\030\006 \001(\002\"\221\001\n\nRepBoolean\022\017\n\007userI"
  "dx\030\001 \001(\004\022-\n\004type\030\002 \001(\0162\037.ProtoObject.Rep"
  "Boolean.RepType\022\017\n\007boolean\030\003 \001(\010\"2\n\007RepT"
  "ype\022\013\n\007RUNNING\020\000\022\013\n\007JUMPING\020\001\022\r\n\tEQUIPPP"
  "ED\020\002\"\220\001\n\tEquipment\022\017\n\007userIdx\030\001 \001(\004\0227\n\te"
  "quipType\030\002 \001(\0162$.ProtoObject.Equipment.E"
  "quipmentType\022\021\n\titemIndex\030\003 \001(\004\"&\n\rEquip"
  "mentType\022\t\n\005CLOTH\020\000\022\n\n\006WEAPON\020\001\"\364\001\n\016Reso"
  "urceChange\022\016\n\006mapIdx\030\001 \001(\r\0229\n\007resType\030\002 "
  "\001(\0162(.ProtoObject.ResourceChange.Resourc"
  "eType\022=\n\rresChangeType\030\003 \001(\0162&.ProtoObje"
  "ct.ResourceChange.ChangeType\022\016\n\006resIdx\030\004"
  " \001(\004\"#\n\014ResourceType\022\t\n\005ENEMY\020\000\022\010\n\004ITEM\020"
  "\001\"#\n\nChangeType\022\n\n\006REMOVE\020\000\022\t\n\005SPAWN\020\001\"\?"
  "\n\rMapTransition\022\017\n\007userIdx\030\001 \001(\004\022\016\n\006befo"
  "re\030\002 \001(\r\022\r\n\005after\030\003 \001(\r2\203\010\n\013GameService\022"
  "=\n\010TryLogin\022\026.ProtoObject.LoginInfo\032\027.Pr"
  "otoObject.PlayerInfo\"\000\022@\n\013TryRegister\022\026."
  "ProtoObject.LoginInfo\032\027.ProtoObject.Play"
  "erInfo\"\000\022=\n\013SetNickname\022\025.ProtoObject.Ni"
  "ckname\032\025.ProtoObject.Nickname\"\000\0229\n\004Save\022"
  "\027.ProtoObject.PlayerInfo\032\026.google.protob"
  "uf.Empty\"\000\022A\n\014SendLocation\022\025.ProtoObject"
  ".Location\032\026.google.protobuf.Empty\"\000(\001\022E\n"
  "\016SendRepBoolean\022\027.ProtoObject.RepBoolean"
  "\032\026.google.protobuf.Empty\"\000(\001\022G\n\023SendEqui"
  "pmentChange\022\026.ProtoObject.Equipment\032\026.go"
  "ogle.protobuf.Empty\"\000\022N\n\025SendMapResource"
  "Change\022\033.ProtoObject.ResourceChange\032\026.go"
  "ogle.protobuf.Empty\"\000\022I\n\021SendMapTransiti"
  "on\022\032.ProtoObject.MapTransition\032\026.google."
  "protobuf.Empty\"\000\022F\n\021BroadcastLocation\022\026."
  "google.protobuf.Empty\032\025.ProtoObject.Loca"
  "tion\"\0000\001\022J\n\023BroadcastRepBoolean\022\026.google"
  ".protobuf.Empty\032\027.ProtoObject.RepBoolean"
  "\"\0000\001\022N\n\030BroadcastEquipmentChange\022\026.googl"
  "e.protobuf.Empty\032\026.ProtoObject.Equipment"
  "\"\0000\001\022U\n\032BroadcastMapResourceChange\022\026.goo"
  "gle.protobuf.Empty\032\033.ProtoObject.Resourc"
  "eChange\"\0000\001\022P\n\026BroadcastMapTransition\022\026."
  "google.protobuf.Empty\032\032.ProtoObject.MapT"
  "ransition\"\0000\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ProtoObject_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_ProtoObject_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ProtoObject_2eproto = {
    false, false, 2901, descriptor_table_protodef_ProtoObject_2eproto,
    "ProtoObject.proto",
    &descriptor_table_ProtoObject_2eproto_once, descriptor_table_ProtoObject_2eproto_deps, 1, 13,
    schemas, file_default_instances, TableStruct_ProtoObject_2eproto::offsets,
    file_level_metadata_ProtoObject_2eproto, file_level_enum_descriptors_ProtoObject_2eproto,
    file_level_service_descriptors_ProtoObject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ProtoObject_2eproto_getter() {
  return &descriptor_table_ProtoObject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ProtoObject_2eproto(&descriptor_table_ProtoObject_2eproto);
namespace ProtoObject {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inventory_ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoObject_2eproto);
  return file_level_enum_descriptors_ProtoObject_2eproto[0];
}
bool Inventory_ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Inventory_ItemType Inventory::CLOTH;
constexpr Inventory_ItemType Inventory::WEAPON;
constexpr Inventory_ItemType Inventory::ITEM;
constexpr Inventory_ItemType Inventory::ItemType_MIN;
constexpr Inventory_ItemType Inventory::ItemType_MAX;
constexpr int Inventory::ItemType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestStatus_SubQuestStatus_SubQuestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoObject_2eproto);
  return file_level_enum_descriptors_ProtoObject_2eproto[1];
}
bool QuestStatus_SubQuestStatus_SubQuestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::ARRIVAL;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::HUNT;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::ITEM;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::ACTION;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::SubQuestType_MIN;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::SubQuestType_MAX;
constexpr int QuestStatus_SubQuestStatus::SubQuestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestStatus_QuestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoObject_2eproto);
  return file_level_enum_descriptors_ProtoObject_2eproto[2];
}
bool QuestStatus_QuestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QuestStatus_QuestType QuestStatus::SERIAL;
constexpr QuestStatus_QuestType QuestStatus::PARALLEL;
constexpr QuestStatus_QuestType QuestStatus::QuestType_MIN;
constexpr QuestStatus_QuestType QuestStatus::QuestType_MAX;
constexpr int QuestStatus::QuestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestStatus_QuestProgressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoObject_2eproto);
  return file_level_enum_descriptors_ProtoObject_2eproto[3];
}
bool QuestStatus_QuestProgressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QuestStatus_QuestProgressType QuestStatus::UNAVAILABLE;
constexpr QuestStatus_QuestProgressType QuestStatus::AVAILABLE;
constexpr QuestStatus_QuestProgressType QuestStatus::INPROGRESS;
constexpr QuestStatus_QuestProgressType QuestStatus::COMPLETABLE;
constexpr QuestStatus_QuestProgressType QuestStatus::COMPLETED;
constexpr QuestStatus_QuestProgressType QuestStatus::QuestProgressType_MIN;
constexpr QuestStatus_QuestProgressType QuestStatus::QuestProgressType_MAX;
constexpr int QuestStatus::QuestProgressType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RepBoolean_RepType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoObject_2eproto);
  return file_level_enum_descriptors_ProtoObject_2eproto[4];
}
bool RepBoolean_RepType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RepBoolean_RepType RepBoolean::RUNNING;
constexpr RepBoolean_RepType RepBoolean::JUMPING;
constexpr RepBoolean_RepType RepBoolean::EQUIPPPED;
constexpr RepBoolean_RepType RepBoolean::RepType_MIN;
constexpr RepBoolean_RepType RepBoolean::RepType_MAX;
constexpr int RepBoolean::RepType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Equipment_EquipmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoObject_2eproto);
  return file_level_enum_descriptors_ProtoObject_2eproto[5];
}
bool Equipment_EquipmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Equipment_EquipmentType Equipment::CLOTH;
constexpr Equipment_EquipmentType Equipment::WEAPON;
constexpr Equipment_EquipmentType Equipment::EquipmentType_MIN;
constexpr Equipment_EquipmentType Equipment::EquipmentType_MAX;
constexpr int Equipment::EquipmentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceChange_ResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoObject_2eproto);
  return file_level_enum_descriptors_ProtoObject_2eproto[6];
}
bool ResourceChange_ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResourceChange_ResourceType ResourceChange::ENEMY;
constexpr ResourceChange_ResourceType ResourceChange::ITEM;
constexpr ResourceChange_ResourceType ResourceChange::ResourceType_MIN;
constexpr ResourceChange_ResourceType ResourceChange::ResourceType_MAX;
constexpr int ResourceChange::ResourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceChange_ChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ProtoObject_2eproto);
  return file_level_enum_descriptors_ProtoObject_2eproto[7];
}
bool ResourceChange_ChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResourceChange_ChangeType ResourceChange::REMOVE;
constexpr ResourceChange_ChangeType ResourceChange::SPAWN;
constexpr ResourceChange_ChangeType ResourceChange::ChangeType_MIN;
constexpr ResourceChange_ChangeType ResourceChange::ChangeType_MAX;
constexpr int ResourceChange::ChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LoginInfo::_Internal {
 public:
};

LoginInfo::LoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.LoginInfo)
}
LoginInfo::LoginInfo(const LoginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ProtoObject.LoginInfo)
}

inline void LoginInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginInfo::~LoginInfo() {
  // @@protoc_insertion_point(destructor:ProtoObject.LoginInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.password_.Destroy();
}

void LoginInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.LoginInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProtoObject.LoginInfo.id"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProtoObject.LoginInfo.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.LoginInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoObject.LoginInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoObject.LoginInfo.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.LoginInfo)
  return target;
}

size_t LoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.LoginInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginInfo::GetClassData() const { return &_class_data_; }


void LoginInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginInfo*>(&to_msg);
  auto& from = static_cast<const LoginInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.LoginInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.LoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {
  return true;
}

void LoginInfo::InternalSwap(LoginInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[0]);
}

// ===================================================================

class GameItem::_Internal {
 public:
};

GameItem::GameItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.GameItem)
}
GameItem::GameItem(const GameItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.GameItem)
}

inline void GameItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){uint64_t{0u}}
    , decltype(_impl_.num_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameItem::~GameItem() {
  // @@protoc_insertion_point(destructor:ProtoObject.GameItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.GameItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.GameItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // uint64 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.GameItem)
  return target;
}

size_t GameItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.GameItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // uint64 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameItem::GetClassData() const { return &_class_data_; }


void GameItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameItem*>(&to_msg);
  auto& from = static_cast<const GameItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.GameItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameItem::CopyFrom(const GameItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.GameItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameItem::IsInitialized() const {
  return true;
}

void GameItem::InternalSwap(GameItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameItem, _impl_.num_)
      + sizeof(GameItem::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(GameItem, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[1]);
}

// ===================================================================

class TypeInventory::_Internal {
 public:
};

TypeInventory::TypeInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.TypeInventory)
}
TypeInventory::TypeInventory(const TypeInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:ProtoObject.TypeInventory)
}

inline void TypeInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TypeInventory::~TypeInventory() {
  // @@protoc_insertion_point(destructor:ProtoObject.TypeInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void TypeInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.TypeInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ProtoObject.GameItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.TypeInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .ProtoObject.GameItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.TypeInventory)
  return target;
}

size_t TypeInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.TypeInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoObject.GameItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeInventory::GetClassData() const { return &_class_data_; }


void TypeInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeInventory*>(&to_msg);
  auto& from = static_cast<const TypeInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.TypeInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeInventory::CopyFrom(const TypeInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.TypeInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeInventory::IsInitialized() const {
  return true;
}

void TypeInventory::InternalSwap(TypeInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[2]);
}

// ===================================================================

class Inventory::_Internal {
 public:
};

Inventory::Inventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.Inventory)
}
Inventory::Inventory(const Inventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Inventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.typeinventory_){from._impl_.typeinventory_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtoObject.Inventory)
}

inline void Inventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.typeinventory_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:ProtoObject.Inventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Inventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.typeinventory_.~RepeatedPtrField();
}

void Inventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Inventory::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.Inventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.typeinventory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ProtoObject.TypeInventory typeInventory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_typeinventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Inventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.Inventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ProtoObject.TypeInventory typeInventory = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_typeinventory_size()); i < n; i++) {
    const auto& repfield = this->_internal_typeinventory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.Inventory)
  return target;
}

size_t Inventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.Inventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoObject.TypeInventory typeInventory = 1;
  total_size += 1UL * this->_internal_typeinventory_size();
  for (const auto& msg : this->_impl_.typeinventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Inventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inventory::GetClassData() const { return &_class_data_; }


void Inventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Inventory*>(&to_msg);
  auto& from = static_cast<const Inventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.Inventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.typeinventory_.MergeFrom(from._impl_.typeinventory_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inventory::CopyFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {
  return true;
}

void Inventory::InternalSwap(Inventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.typeinventory_.InternalSwap(&other->_impl_.typeinventory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[3]);
}

// ===================================================================

class QuestStatus_SubQuestStatus::_Internal {
 public:
};

QuestStatus_SubQuestStatus::QuestStatus_SubQuestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.QuestStatus.SubQuestStatus)
}
QuestStatus_SubQuestStatus::QuestStatus_SubQuestStatus(const QuestStatus_SubQuestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuestStatus_SubQuestStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.bstarted_){}
    , decltype(_impl_.bcompleted_){}
    , decltype(_impl_.curramount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curramount_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.curramount_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.QuestStatus.SubQuestStatus)
}

inline void QuestStatus_SubQuestStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.bstarted_){false}
    , decltype(_impl_.bcompleted_){false}
    , decltype(_impl_.curramount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuestStatus_SubQuestStatus::~QuestStatus_SubQuestStatus() {
  // @@protoc_insertion_point(destructor:ProtoObject.QuestStatus.SubQuestStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuestStatus_SubQuestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuestStatus_SubQuestStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuestStatus_SubQuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.QuestStatus.SubQuestStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curramount_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.curramount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuestStatus_SubQuestStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProtoObject.QuestStatus.SubQuestStatus.SubQuestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ProtoObject::QuestStatus_SubQuestStatus_SubQuestType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool bStarted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bstarted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr) != 0;
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bCompleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bcompleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr) != 0;
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 currAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.curramount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuestStatus_SubQuestStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.QuestStatus.SubQuestStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProtoObject.QuestStatus.SubQuestStatus.SubQuestType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bool bStarted = 2;
  if (this->_internal_bstarted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bstarted(), target);
  }

  // bool bCompleted = 3;
  if (this->_internal_bcompleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bcompleted(), target);
  }

  // uint32 currAmount = 4;
  if (this->_internal_curramount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_curramount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.QuestStatus.SubQuestStatus)
  return target;
}

size_t QuestStatus_SubQuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.QuestStatus.SubQuestStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProtoObject.QuestStatus.SubQuestStatus.SubQuestType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool bStarted = 2;
  if (this->_internal_bstarted() != 0) {
    total_size += 1 + 1;
  }

  // bool bCompleted = 3;
  if (this->_internal_bcompleted() != 0) {
    total_size += 1 + 1;
  }

  // uint32 currAmount = 4;
  if (this->_internal_curramount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_curramount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuestStatus_SubQuestStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuestStatus_SubQuestStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuestStatus_SubQuestStatus::GetClassData() const { return &_class_data_; }


void QuestStatus_SubQuestStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuestStatus_SubQuestStatus*>(&to_msg);
  auto& from = static_cast<const QuestStatus_SubQuestStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.QuestStatus.SubQuestStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_bstarted() != 0) {
    _this->_internal_set_bstarted(from._internal_bstarted());
  }
  if (from._internal_bcompleted() != 0) {
    _this->_internal_set_bcompleted(from._internal_bcompleted());
  }
  if (from._internal_curramount() != 0) {
    _this->_internal_set_curramount(from._internal_curramount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuestStatus_SubQuestStatus::CopyFrom(const QuestStatus_SubQuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.QuestStatus.SubQuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStatus_SubQuestStatus::IsInitialized() const {
  return true;
}

void QuestStatus_SubQuestStatus::InternalSwap(QuestStatus_SubQuestStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestStatus_SubQuestStatus, _impl_.curramount_)
      + sizeof(QuestStatus_SubQuestStatus::_impl_.curramount_)
      - PROTOBUF_FIELD_OFFSET(QuestStatus_SubQuestStatus, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestStatus_SubQuestStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[4]);
}

// ===================================================================

class QuestStatus::_Internal {
 public:
};

QuestStatus::QuestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.QuestStatus)
}
QuestStatus::QuestStatus(const QuestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuestStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.substatus_){from._impl_.substatus_}
    , decltype(_impl_.index_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.progresstype_){}
    , decltype(_impl_.currphase_){}
    , decltype(_impl_.completed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.completed_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.completed_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.QuestStatus)
}

inline void QuestStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.substatus_){arena}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.progresstype_){0}
    , decltype(_impl_.currphase_){0u}
    , decltype(_impl_.completed_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuestStatus::~QuestStatus() {
  // @@protoc_insertion_point(destructor:ProtoObject.QuestStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.substatus_.~RepeatedPtrField();
}

void QuestStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.QuestStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.substatus_.Clear();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.completed_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.completed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuestStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProtoObject.QuestStatus.QuestType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ProtoObject::QuestStatus_QuestType>(val));
        } else
          goto handle_unusual;
        continue;
      // .ProtoObject.QuestStatus.QuestProgressType progressType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_progresstype(static_cast<::ProtoObject::QuestStatus_QuestProgressType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .ProtoObject.QuestStatus.SubQuestStatus subStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_substatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 currPhase = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.currphase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuestStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.QuestStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .ProtoObject.QuestStatus.QuestType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .ProtoObject.QuestStatus.QuestProgressType progressType = 3;
  if (this->_internal_progresstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_progresstype(), target);
  }

  // repeated .ProtoObject.QuestStatus.SubQuestStatus subStatus = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_substatus_size()); i < n; i++) {
    const auto& repfield = this->_internal_substatus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 currPhase = 5;
  if (this->_internal_currphase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_currphase(), target);
  }

  // uint32 completed = 6;
  if (this->_internal_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.QuestStatus)
  return target;
}

size_t QuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.QuestStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoObject.QuestStatus.SubQuestStatus subStatus = 4;
  total_size += 1UL * this->_internal_substatus_size();
  for (const auto& msg : this->_impl_.substatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // .ProtoObject.QuestStatus.QuestType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .ProtoObject.QuestStatus.QuestProgressType progressType = 3;
  if (this->_internal_progresstype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_progresstype());
  }

  // uint32 currPhase = 5;
  if (this->_internal_currphase() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currphase());
  }

  // uint32 completed = 6;
  if (this->_internal_completed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_completed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuestStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuestStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuestStatus::GetClassData() const { return &_class_data_; }


void QuestStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuestStatus*>(&to_msg);
  auto& from = static_cast<const QuestStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.QuestStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.substatus_.MergeFrom(from._impl_.substatus_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_progresstype() != 0) {
    _this->_internal_set_progresstype(from._internal_progresstype());
  }
  if (from._internal_currphase() != 0) {
    _this->_internal_set_currphase(from._internal_currphase());
  }
  if (from._internal_completed() != 0) {
    _this->_internal_set_completed(from._internal_completed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuestStatus::CopyFrom(const QuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStatus::IsInitialized() const {
  return true;
}

void QuestStatus::InternalSwap(QuestStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.substatus_.InternalSwap(&other->_impl_.substatus_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestStatus, _impl_.completed_)
      + sizeof(QuestStatus::_impl_.completed_)
      - PROTOBUF_FIELD_OFFSET(QuestStatus, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[5]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::ProtoObject::Inventory& inventory(const PlayerInfo* msg);
};

const ::ProtoObject::Inventory&
PlayerInfo::_Internal::inventory(const PlayerInfo* msg) {
  return *msg->_impl_.inventory_;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queststatus_){from._impl_.queststatus_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.inventory_){nullptr}
    , decltype(_impl_.level_){}
    , decltype(_impl_.map_){}
    , decltype(_impl_.loc_x_){}
    , decltype(_impl_.loc_y_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.useridx_){}
    , decltype(_impl_.loc_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inventory()) {
    _this->_impl_.inventory_ = new ::ProtoObject::Inventory(*from._impl_.inventory_);
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.loc_z_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.loc_z_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queststatus_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.inventory_){nullptr}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.map_){0u}
    , decltype(_impl_.loc_x_){0}
    , decltype(_impl_.loc_y_){0}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.useridx_){uint64_t{0u}}
    , decltype(_impl_.loc_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:ProtoObject.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queststatus_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inventory_;
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queststatus_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_ != nullptr) {
    delete _impl_.inventory_;
  }
  _impl_.inventory_ = nullptr;
  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.loc_z_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.loc_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProtoObject.PlayerInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float loc_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.loc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float loc_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.loc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float loc_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.loc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProtoObject.Inventory inventory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ProtoObject.QuestStatus questStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queststatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 userIdx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.useridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoObject.PlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 map = 3;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map(), target);
  }

  // float loc_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_x = this->_internal_loc_x();
  uint32_t raw_loc_x;
  memcpy(&raw_loc_x, &tmp_loc_x, sizeof(tmp_loc_x));
  if (raw_loc_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_loc_x(), target);
  }

  // float loc_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_y = this->_internal_loc_y();
  uint32_t raw_loc_y;
  memcpy(&raw_loc_y, &tmp_loc_y, sizeof(tmp_loc_y));
  if (raw_loc_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_loc_y(), target);
  }

  // float loc_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_z = this->_internal_loc_z();
  uint32_t raw_loc_z;
  memcpy(&raw_loc_z, &tmp_loc_z, sizeof(tmp_loc_z));
  if (raw_loc_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_loc_z(), target);
  }

  // uint64 gold = 7;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gold(), target);
  }

  // .ProtoObject.Inventory inventory = 8;
  if (this->_internal_has_inventory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inventory(this),
        _Internal::inventory(this).GetCachedSize(), target, stream);
  }

  // repeated .ProtoObject.QuestStatus questStatus = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queststatus_size()); i < n; i++) {
    const auto& repfield = this->_internal_queststatus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 userIdx = 10;
  if (this->_internal_useridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_useridx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoObject.QuestStatus questStatus = 9;
  total_size += 1UL * this->_internal_queststatus_size();
  for (const auto& msg : this->_impl_.queststatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ProtoObject.Inventory inventory = 8;
  if (this->_internal_has_inventory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inventory_);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 map = 3;
  if (this->_internal_map() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map());
  }

  // float loc_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_x = this->_internal_loc_x();
  uint32_t raw_loc_x;
  memcpy(&raw_loc_x, &tmp_loc_x, sizeof(tmp_loc_x));
  if (raw_loc_x != 0) {
    total_size += 1 + 4;
  }

  // float loc_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_y = this->_internal_loc_y();
  uint32_t raw_loc_y;
  memcpy(&raw_loc_y, &tmp_loc_y, sizeof(tmp_loc_y));
  if (raw_loc_y != 0) {
    total_size += 1 + 4;
  }

  // uint64 gold = 7;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // uint64 userIdx = 10;
  if (this->_internal_useridx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_useridx());
  }

  // float loc_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_z = this->_internal_loc_z();
  uint32_t raw_loc_z;
  memcpy(&raw_loc_z, &tmp_loc_z, sizeof(tmp_loc_z));
  if (raw_loc_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.queststatus_.MergeFrom(from._impl_.queststatus_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_inventory()) {
    _this->_internal_mutable_inventory()->::ProtoObject::Inventory::MergeFrom(
        from._internal_inventory());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_map() != 0) {
    _this->_internal_set_map(from._internal_map());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_x = from._internal_loc_x();
  uint32_t raw_loc_x;
  memcpy(&raw_loc_x, &tmp_loc_x, sizeof(tmp_loc_x));
  if (raw_loc_x != 0) {
    _this->_internal_set_loc_x(from._internal_loc_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_y = from._internal_loc_y();
  uint32_t raw_loc_y;
  memcpy(&raw_loc_y, &tmp_loc_y, sizeof(tmp_loc_y));
  if (raw_loc_y != 0) {
    _this->_internal_set_loc_y(from._internal_loc_y());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  if (from._internal_useridx() != 0) {
    _this->_internal_set_useridx(from._internal_useridx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_z = from._internal_loc_z();
  uint32_t raw_loc_z;
  memcpy(&raw_loc_z, &tmp_loc_z, sizeof(tmp_loc_z));
  if (raw_loc_z != 0) {
    _this->_internal_set_loc_z(from._internal_loc_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.queststatus_.InternalSwap(&other->_impl_.queststatus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.loc_z_)
      + sizeof(PlayerInfo::_impl_.loc_z_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.inventory_)>(
          reinterpret_cast<char*>(&_impl_.inventory_),
          reinterpret_cast<char*>(&other->_impl_.inventory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[6]);
}

// ===================================================================

class Nickname::_Internal {
 public:
};

Nickname::Nickname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.Nickname)
}
Nickname::Nickname(const Nickname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Nickname* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ProtoObject.Nickname)
}

inline void Nickname::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Nickname::~Nickname() {
  // @@protoc_insertion_point(destructor:ProtoObject.Nickname)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Nickname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
}

void Nickname::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Nickname::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.Nickname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Nickname::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProtoObject.Nickname.nickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Nickname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.Nickname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProtoObject.Nickname.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.Nickname)
  return target;
}

size_t Nickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.Nickname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Nickname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Nickname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Nickname::GetClassData() const { return &_class_data_; }


void Nickname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Nickname*>(&to_msg);
  auto& from = static_cast<const Nickname&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.Nickname)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Nickname::CopyFrom(const Nickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.Nickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nickname::IsInitialized() const {
  return true;
}

void Nickname::InternalSwap(Nickname* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Nickname::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[7]);
}

// ===================================================================

class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.useridx_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.useridx_, &from._impl_.useridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_) -
    reinterpret_cast<char*>(&_impl_.useridx_)) + sizeof(_impl_.yaw_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.Location)
}

inline void Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.useridx_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:ProtoObject.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.useridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.useridx_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 userIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.useridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 userIdx = 1;
  if (this->_internal_useridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_useridx(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float pitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pitch(), target);
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 userIdx = 1;
  if (this->_internal_useridx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_useridx());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }


void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Location*>(&to_msg);
  auto& from = static_cast<const Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_useridx() != 0) {
    _this->_internal_set_useridx(from._internal_useridx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, _impl_.yaw_)
      + sizeof(Location::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Location, _impl_.useridx_)>(
          reinterpret_cast<char*>(&_impl_.useridx_),
          reinterpret_cast<char*>(&other->_impl_.useridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[8]);
}

// ===================================================================

class RepBoolean::_Internal {
 public:
};

RepBoolean::RepBoolean(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.RepBoolean)
}
RepBoolean::RepBoolean(const RepBoolean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RepBoolean* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.useridx_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.boolean_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.useridx_, &from._impl_.useridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.boolean_) -
    reinterpret_cast<char*>(&_impl_.useridx_)) + sizeof(_impl_.boolean_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.RepBoolean)
}

inline void RepBoolean::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.useridx_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.boolean_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RepBoolean::~RepBoolean() {
  // @@protoc_insertion_point(destructor:ProtoObject.RepBoolean)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepBoolean::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepBoolean::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RepBoolean::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.RepBoolean)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.useridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.boolean_) -
      reinterpret_cast<char*>(&_impl_.useridx_)) + sizeof(_impl_.boolean_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepBoolean::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 userIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.useridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProtoObject.RepBoolean.RepType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ProtoObject::RepBoolean_RepType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool boolean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr) != 0;
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepBoolean::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.RepBoolean)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 userIdx = 1;
  if (this->_internal_useridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_useridx(), target);
  }

  // .ProtoObject.RepBoolean.RepType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bool boolean = 3;
  if (this->_internal_boolean() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_boolean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.RepBoolean)
  return target;
}

size_t RepBoolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.RepBoolean)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 userIdx = 1;
  if (this->_internal_useridx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_useridx());
  }

  // .ProtoObject.RepBoolean.RepType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool boolean = 3;
  if (this->_internal_boolean() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepBoolean::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RepBoolean::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepBoolean::GetClassData() const { return &_class_data_; }


void RepBoolean::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RepBoolean*>(&to_msg);
  auto& from = static_cast<const RepBoolean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.RepBoolean)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_useridx() != 0) {
    _this->_internal_set_useridx(from._internal_useridx());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_boolean() != 0) {
    _this->_internal_set_boolean(from._internal_boolean());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepBoolean::CopyFrom(const RepBoolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.RepBoolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepBoolean::IsInitialized() const {
  return true;
}

void RepBoolean::InternalSwap(RepBoolean* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RepBoolean, _impl_.boolean_)
      + sizeof(RepBoolean::_impl_.boolean_)
      - PROTOBUF_FIELD_OFFSET(RepBoolean, _impl_.useridx_)>(
          reinterpret_cast<char*>(&_impl_.useridx_),
          reinterpret_cast<char*>(&other->_impl_.useridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RepBoolean::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[9]);
}

// ===================================================================

class Equipment::_Internal {
 public:
};

Equipment::Equipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.Equipment)
}
Equipment::Equipment(const Equipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Equipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.useridx_){}
    , decltype(_impl_.itemindex_){}
    , decltype(_impl_.equiptype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.useridx_, &from._impl_.useridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.equiptype_) -
    reinterpret_cast<char*>(&_impl_.useridx_)) + sizeof(_impl_.equiptype_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.Equipment)
}

inline void Equipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.useridx_){uint64_t{0u}}
    , decltype(_impl_.itemindex_){uint64_t{0u}}
    , decltype(_impl_.equiptype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Equipment::~Equipment() {
  // @@protoc_insertion_point(destructor:ProtoObject.Equipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Equipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Equipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Equipment::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.Equipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.useridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.equiptype_) -
      reinterpret_cast<char*>(&_impl_.useridx_)) + sizeof(_impl_.equiptype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Equipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 userIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.useridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProtoObject.Equipment.EquipmentType equipType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_equiptype(static_cast<::ProtoObject::Equipment_EquipmentType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 itemIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.itemindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Equipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.Equipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 userIdx = 1;
  if (this->_internal_useridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_useridx(), target);
  }

  // .ProtoObject.Equipment.EquipmentType equipType = 2;
  if (this->_internal_equiptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_equiptype(), target);
  }

  // uint64 itemIndex = 3;
  if (this->_internal_itemindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_itemindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.Equipment)
  return target;
}

size_t Equipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.Equipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 userIdx = 1;
  if (this->_internal_useridx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_useridx());
  }

  // uint64 itemIndex = 3;
  if (this->_internal_itemindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemindex());
  }

  // .ProtoObject.Equipment.EquipmentType equipType = 2;
  if (this->_internal_equiptype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_equiptype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Equipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Equipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Equipment::GetClassData() const { return &_class_data_; }


void Equipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Equipment*>(&to_msg);
  auto& from = static_cast<const Equipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.Equipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_useridx() != 0) {
    _this->_internal_set_useridx(from._internal_useridx());
  }
  if (from._internal_itemindex() != 0) {
    _this->_internal_set_itemindex(from._internal_itemindex());
  }
  if (from._internal_equiptype() != 0) {
    _this->_internal_set_equiptype(from._internal_equiptype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Equipment::CopyFrom(const Equipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.Equipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {
  return true;
}

void Equipment::InternalSwap(Equipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Equipment, _impl_.equiptype_)
      + sizeof(Equipment::_impl_.equiptype_)
      - PROTOBUF_FIELD_OFFSET(Equipment, _impl_.useridx_)>(
          reinterpret_cast<char*>(&_impl_.useridx_),
          reinterpret_cast<char*>(&other->_impl_.useridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Equipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[10]);
}

// ===================================================================

class ResourceChange::_Internal {
 public:
};

ResourceChange::ResourceChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.ResourceChange)
}
ResourceChange::ResourceChange(const ResourceChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapidx_){}
    , decltype(_impl_.restype_){}
    , decltype(_impl_.residx_){}
    , decltype(_impl_.reschangetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mapidx_, &from._impl_.mapidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reschangetype_) -
    reinterpret_cast<char*>(&_impl_.mapidx_)) + sizeof(_impl_.reschangetype_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.ResourceChange)
}

inline void ResourceChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapidx_){0u}
    , decltype(_impl_.restype_){0}
    , decltype(_impl_.residx_){uint64_t{0u}}
    , decltype(_impl_.reschangetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResourceChange::~ResourceChange() {
  // @@protoc_insertion_point(destructor:ProtoObject.ResourceChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceChange::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.ResourceChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mapidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reschangetype_) -
      reinterpret_cast<char*>(&_impl_.mapidx_)) + sizeof(_impl_.reschangetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mapIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProtoObject.ResourceChange.ResourceType resType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_restype(static_cast<::ProtoObject::ResourceChange_ResourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .ProtoObject.ResourceChange.ChangeType resChangeType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reschangetype(static_cast<::ProtoObject::ResourceChange_ChangeType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 resIdx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.residx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.ResourceChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mapIdx = 1;
  if (this->_internal_mapidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapidx(), target);
  }

  // .ProtoObject.ResourceChange.ResourceType resType = 2;
  if (this->_internal_restype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_restype(), target);
  }

  // .ProtoObject.ResourceChange.ChangeType resChangeType = 3;
  if (this->_internal_reschangetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reschangetype(), target);
  }

  // uint64 resIdx = 4;
  if (this->_internal_residx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_residx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.ResourceChange)
  return target;
}

size_t ResourceChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.ResourceChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mapIdx = 1;
  if (this->_internal_mapidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapidx());
  }

  // .ProtoObject.ResourceChange.ResourceType resType = 2;
  if (this->_internal_restype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_restype());
  }

  // uint64 resIdx = 4;
  if (this->_internal_residx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_residx());
  }

  // .ProtoObject.ResourceChange.ChangeType resChangeType = 3;
  if (this->_internal_reschangetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reschangetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceChange::GetClassData() const { return &_class_data_; }


void ResourceChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceChange*>(&to_msg);
  auto& from = static_cast<const ResourceChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.ResourceChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mapidx() != 0) {
    _this->_internal_set_mapidx(from._internal_mapidx());
  }
  if (from._internal_restype() != 0) {
    _this->_internal_set_restype(from._internal_restype());
  }
  if (from._internal_residx() != 0) {
    _this->_internal_set_residx(from._internal_residx());
  }
  if (from._internal_reschangetype() != 0) {
    _this->_internal_set_reschangetype(from._internal_reschangetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceChange::CopyFrom(const ResourceChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.ResourceChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceChange::IsInitialized() const {
  return true;
}

void ResourceChange::InternalSwap(ResourceChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceChange, _impl_.reschangetype_)
      + sizeof(ResourceChange::_impl_.reschangetype_)
      - PROTOBUF_FIELD_OFFSET(ResourceChange, _impl_.mapidx_)>(
          reinterpret_cast<char*>(&_impl_.mapidx_),
          reinterpret_cast<char*>(&other->_impl_.mapidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[11]);
}

// ===================================================================

class MapTransition::_Internal {
 public:
};

MapTransition::MapTransition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProtoObject.MapTransition)
}
MapTransition::MapTransition(const MapTransition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapTransition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.useridx_){}
    , decltype(_impl_.before_){}
    , decltype(_impl_.after_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.useridx_, &from._impl_.useridx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.after_) -
    reinterpret_cast<char*>(&_impl_.useridx_)) + sizeof(_impl_.after_));
  // @@protoc_insertion_point(copy_constructor:ProtoObject.MapTransition)
}

inline void MapTransition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.useridx_){uint64_t{0u}}
    , decltype(_impl_.before_){0u}
    , decltype(_impl_.after_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapTransition::~MapTransition() {
  // @@protoc_insertion_point(destructor:ProtoObject.MapTransition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapTransition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapTransition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoObject.MapTransition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.useridx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.after_) -
      reinterpret_cast<char*>(&_impl_.useridx_)) + sizeof(_impl_.after_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapTransition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 userIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.useridx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 before = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 after = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapTransition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoObject.MapTransition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 userIdx = 1;
  if (this->_internal_useridx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_useridx(), target);
  }

  // uint32 before = 2;
  if (this->_internal_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_before(), target);
  }

  // uint32 after = 3;
  if (this->_internal_after() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_after(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoObject.MapTransition)
  return target;
}

size_t MapTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoObject.MapTransition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 userIdx = 1;
  if (this->_internal_useridx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_useridx());
  }

  // uint32 before = 2;
  if (this->_internal_before() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_before());
  }

  // uint32 after = 3;
  if (this->_internal_after() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_after());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapTransition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapTransition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapTransition::GetClassData() const { return &_class_data_; }


void MapTransition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapTransition*>(&to_msg);
  auto& from = static_cast<const MapTransition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProtoObject.MapTransition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_useridx() != 0) {
    _this->_internal_set_useridx(from._internal_useridx());
  }
  if (from._internal_before() != 0) {
    _this->_internal_set_before(from._internal_before());
  }
  if (from._internal_after() != 0) {
    _this->_internal_set_after(from._internal_after());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapTransition::CopyFrom(const MapTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoObject.MapTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapTransition::IsInitialized() const {
  return true;
}

void MapTransition::InternalSwap(MapTransition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapTransition, _impl_.after_)
      + sizeof(MapTransition::_impl_.after_)
      - PROTOBUF_FIELD_OFFSET(MapTransition, _impl_.useridx_)>(
          reinterpret_cast<char*>(&_impl_.useridx_),
          reinterpret_cast<char*>(&other->_impl_.useridx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapTransition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ProtoObject_2eproto_getter, &descriptor_table_ProtoObject_2eproto_once,
      file_level_metadata_ProtoObject_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoObject
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoObject::LoginInfo*
Arena::CreateMaybeMessage< ::ProtoObject::LoginInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::LoginInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::GameItem*
Arena::CreateMaybeMessage< ::ProtoObject::GameItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::GameItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::TypeInventory*
Arena::CreateMaybeMessage< ::ProtoObject::TypeInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::TypeInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::Inventory*
Arena::CreateMaybeMessage< ::ProtoObject::Inventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::Inventory >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::QuestStatus_SubQuestStatus*
Arena::CreateMaybeMessage< ::ProtoObject::QuestStatus_SubQuestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::QuestStatus_SubQuestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::QuestStatus*
Arena::CreateMaybeMessage< ::ProtoObject::QuestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::QuestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::PlayerInfo*
Arena::CreateMaybeMessage< ::ProtoObject::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::Nickname*
Arena::CreateMaybeMessage< ::ProtoObject::Nickname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::Nickname >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::Location*
Arena::CreateMaybeMessage< ::ProtoObject::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::RepBoolean*
Arena::CreateMaybeMessage< ::ProtoObject::RepBoolean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::RepBoolean >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::Equipment*
Arena::CreateMaybeMessage< ::ProtoObject::Equipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::Equipment >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::ResourceChange*
Arena::CreateMaybeMessage< ::ProtoObject::ResourceChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::ResourceChange >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoObject::MapTransition*
Arena::CreateMaybeMessage< ::ProtoObject::MapTransition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtoObject::MapTransition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
