// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ProtoObject.proto

#include "ProtoObject.pb.h"
#include "ProtoObject.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ProtoObject {

static const char* GameService_method_names[] = {
  "/ProtoObject.GameService/TryLogin",
  "/ProtoObject.GameService/TryRegister",
  "/ProtoObject.GameService/SetNickname",
  "/ProtoObject.GameService/Save",
  "/ProtoObject.GameService/SendLocation",
  "/ProtoObject.GameService/SendRepBoolean",
  "/ProtoObject.GameService/SendEquipmentChange",
  "/ProtoObject.GameService/SendMapResourceChange",
  "/ProtoObject.GameService/SendMapTransition",
  "/ProtoObject.GameService/BroadcastLocation",
  "/ProtoObject.GameService/BroadcastRepBoolean",
  "/ProtoObject.GameService/BroadcastEquipmentChange",
  "/ProtoObject.GameService/BroadcastMapResourceChange",
  "/ProtoObject.GameService/BroadcastMapTransition",
};

std::unique_ptr< GameService::Stub> GameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GameService::Stub> stub(new GameService::Stub(channel, options));
  return stub;
}

GameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TryLogin_(GameService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TryRegister_(GameService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNickname_(GameService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Save_(GameService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendLocation_(GameService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SendRepBoolean_(GameService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SendEquipmentChange_(GameService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMapResourceChange_(GameService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendMapTransition_(GameService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BroadcastLocation_(GameService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BroadcastRepBoolean_(GameService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BroadcastEquipmentChange_(GameService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BroadcastMapResourceChange_(GameService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BroadcastMapTransition_(GameService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status GameService::Stub::TryLogin(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo& request, ::ProtoObject::PlayerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ProtoObject::LoginInfo, ::ProtoObject::PlayerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TryLogin_, context, request, response);
}

void GameService::Stub::async::TryLogin(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo* request, ::ProtoObject::PlayerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ProtoObject::LoginInfo, ::ProtoObject::PlayerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TryLogin_, context, request, response, std::move(f));
}

void GameService::Stub::async::TryLogin(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo* request, ::ProtoObject::PlayerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TryLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ProtoObject::PlayerInfo>* GameService::Stub::PrepareAsyncTryLoginRaw(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ProtoObject::PlayerInfo, ::ProtoObject::LoginInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TryLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ProtoObject::PlayerInfo>* GameService::Stub::AsyncTryLoginRaw(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTryLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::TryRegister(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo& request, ::ProtoObject::PlayerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ProtoObject::LoginInfo, ::ProtoObject::PlayerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TryRegister_, context, request, response);
}

void GameService::Stub::async::TryRegister(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo* request, ::ProtoObject::PlayerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ProtoObject::LoginInfo, ::ProtoObject::PlayerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TryRegister_, context, request, response, std::move(f));
}

void GameService::Stub::async::TryRegister(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo* request, ::ProtoObject::PlayerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TryRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ProtoObject::PlayerInfo>* GameService::Stub::PrepareAsyncTryRegisterRaw(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ProtoObject::PlayerInfo, ::ProtoObject::LoginInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TryRegister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ProtoObject::PlayerInfo>* GameService::Stub::AsyncTryRegisterRaw(::grpc::ClientContext* context, const ::ProtoObject::LoginInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTryRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::SetNickname(::grpc::ClientContext* context, const ::ProtoObject::Nickname& request, ::ProtoObject::Nickname* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ProtoObject::Nickname, ::ProtoObject::Nickname, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNickname_, context, request, response);
}

void GameService::Stub::async::SetNickname(::grpc::ClientContext* context, const ::ProtoObject::Nickname* request, ::ProtoObject::Nickname* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ProtoObject::Nickname, ::ProtoObject::Nickname, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNickname_, context, request, response, std::move(f));
}

void GameService::Stub::async::SetNickname(::grpc::ClientContext* context, const ::ProtoObject::Nickname* request, ::ProtoObject::Nickname* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNickname_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ProtoObject::Nickname>* GameService::Stub::PrepareAsyncSetNicknameRaw(::grpc::ClientContext* context, const ::ProtoObject::Nickname& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ProtoObject::Nickname, ::ProtoObject::Nickname, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNickname_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ProtoObject::Nickname>* GameService::Stub::AsyncSetNicknameRaw(::grpc::ClientContext* context, const ::ProtoObject::Nickname& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNicknameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::Save(::grpc::ClientContext* context, const ::ProtoObject::PlayerInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ProtoObject::PlayerInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Save_, context, request, response);
}

void GameService::Stub::async::Save(::grpc::ClientContext* context, const ::ProtoObject::PlayerInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ProtoObject::PlayerInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, std::move(f));
}

void GameService::Stub::async::Save(::grpc::ClientContext* context, const ::ProtoObject::PlayerInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Save_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GameService::Stub::PrepareAsyncSaveRaw(::grpc::ClientContext* context, const ::ProtoObject::PlayerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ProtoObject::PlayerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Save_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GameService::Stub::AsyncSaveRaw(::grpc::ClientContext* context, const ::ProtoObject::PlayerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::ProtoObject::Location>* GameService::Stub::SendLocationRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::ProtoObject::Location>::Create(channel_.get(), rpcmethod_SendLocation_, context, response);
}

void GameService::Stub::async::SendLocation(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::ProtoObject::Location>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::ProtoObject::Location>::Create(stub_->channel_.get(), stub_->rpcmethod_SendLocation_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ProtoObject::Location>* GameService::Stub::AsyncSendLocationRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ProtoObject::Location>::Create(channel_.get(), cq, rpcmethod_SendLocation_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ProtoObject::Location>* GameService::Stub::PrepareAsyncSendLocationRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ProtoObject::Location>::Create(channel_.get(), cq, rpcmethod_SendLocation_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::ProtoObject::RepBoolean>* GameService::Stub::SendRepBooleanRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::ProtoObject::RepBoolean>::Create(channel_.get(), rpcmethod_SendRepBoolean_, context, response);
}

void GameService::Stub::async::SendRepBoolean(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::ClientWriteReactor< ::ProtoObject::RepBoolean>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::ProtoObject::RepBoolean>::Create(stub_->channel_.get(), stub_->rpcmethod_SendRepBoolean_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::ProtoObject::RepBoolean>* GameService::Stub::AsyncSendRepBooleanRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ProtoObject::RepBoolean>::Create(channel_.get(), cq, rpcmethod_SendRepBoolean_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::ProtoObject::RepBoolean>* GameService::Stub::PrepareAsyncSendRepBooleanRaw(::grpc::ClientContext* context, ::google::protobuf::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::ProtoObject::RepBoolean>::Create(channel_.get(), cq, rpcmethod_SendRepBoolean_, context, response, false, nullptr);
}

::grpc::Status GameService::Stub::SendEquipmentChange(::grpc::ClientContext* context, const ::ProtoObject::Equipment& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ProtoObject::Equipment, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendEquipmentChange_, context, request, response);
}

void GameService::Stub::async::SendEquipmentChange(::grpc::ClientContext* context, const ::ProtoObject::Equipment* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ProtoObject::Equipment, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendEquipmentChange_, context, request, response, std::move(f));
}

void GameService::Stub::async::SendEquipmentChange(::grpc::ClientContext* context, const ::ProtoObject::Equipment* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendEquipmentChange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GameService::Stub::PrepareAsyncSendEquipmentChangeRaw(::grpc::ClientContext* context, const ::ProtoObject::Equipment& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ProtoObject::Equipment, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendEquipmentChange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GameService::Stub::AsyncSendEquipmentChangeRaw(::grpc::ClientContext* context, const ::ProtoObject::Equipment& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendEquipmentChangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::SendMapResourceChange(::grpc::ClientContext* context, const ::ProtoObject::ResourceChange& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ProtoObject::ResourceChange, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMapResourceChange_, context, request, response);
}

void GameService::Stub::async::SendMapResourceChange(::grpc::ClientContext* context, const ::ProtoObject::ResourceChange* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ProtoObject::ResourceChange, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMapResourceChange_, context, request, response, std::move(f));
}

void GameService::Stub::async::SendMapResourceChange(::grpc::ClientContext* context, const ::ProtoObject::ResourceChange* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMapResourceChange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GameService::Stub::PrepareAsyncSendMapResourceChangeRaw(::grpc::ClientContext* context, const ::ProtoObject::ResourceChange& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ProtoObject::ResourceChange, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMapResourceChange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GameService::Stub::AsyncSendMapResourceChangeRaw(::grpc::ClientContext* context, const ::ProtoObject::ResourceChange& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMapResourceChangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GameService::Stub::SendMapTransition(::grpc::ClientContext* context, const ::ProtoObject::MapTransition& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ProtoObject::MapTransition, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMapTransition_, context, request, response);
}

void GameService::Stub::async::SendMapTransition(::grpc::ClientContext* context, const ::ProtoObject::MapTransition* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ProtoObject::MapTransition, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMapTransition_, context, request, response, std::move(f));
}

void GameService::Stub::async::SendMapTransition(::grpc::ClientContext* context, const ::ProtoObject::MapTransition* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMapTransition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GameService::Stub::PrepareAsyncSendMapTransitionRaw(::grpc::ClientContext* context, const ::ProtoObject::MapTransition& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::ProtoObject::MapTransition, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMapTransition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* GameService::Stub::AsyncSendMapTransitionRaw(::grpc::ClientContext* context, const ::ProtoObject::MapTransition& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMapTransitionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ProtoObject::Location>* GameService::Stub::BroadcastLocationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::ProtoObject::Location>::Create(channel_.get(), rpcmethod_BroadcastLocation_, context, request);
}

void GameService::Stub::async::BroadcastLocation(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::ProtoObject::Location>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ProtoObject::Location>::Create(stub_->channel_.get(), stub_->rpcmethod_BroadcastLocation_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ProtoObject::Location>* GameService::Stub::AsyncBroadcastLocationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::Location>::Create(channel_.get(), cq, rpcmethod_BroadcastLocation_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ProtoObject::Location>* GameService::Stub::PrepareAsyncBroadcastLocationRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::Location>::Create(channel_.get(), cq, rpcmethod_BroadcastLocation_, context, request, false, nullptr);
}

::grpc::ClientReader< ::ProtoObject::RepBoolean>* GameService::Stub::BroadcastRepBooleanRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::ProtoObject::RepBoolean>::Create(channel_.get(), rpcmethod_BroadcastRepBoolean_, context, request);
}

void GameService::Stub::async::BroadcastRepBoolean(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::ProtoObject::RepBoolean>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ProtoObject::RepBoolean>::Create(stub_->channel_.get(), stub_->rpcmethod_BroadcastRepBoolean_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ProtoObject::RepBoolean>* GameService::Stub::AsyncBroadcastRepBooleanRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::RepBoolean>::Create(channel_.get(), cq, rpcmethod_BroadcastRepBoolean_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ProtoObject::RepBoolean>* GameService::Stub::PrepareAsyncBroadcastRepBooleanRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::RepBoolean>::Create(channel_.get(), cq, rpcmethod_BroadcastRepBoolean_, context, request, false, nullptr);
}

::grpc::ClientReader< ::ProtoObject::Equipment>* GameService::Stub::BroadcastEquipmentChangeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::ProtoObject::Equipment>::Create(channel_.get(), rpcmethod_BroadcastEquipmentChange_, context, request);
}

void GameService::Stub::async::BroadcastEquipmentChange(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::ProtoObject::Equipment>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ProtoObject::Equipment>::Create(stub_->channel_.get(), stub_->rpcmethod_BroadcastEquipmentChange_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ProtoObject::Equipment>* GameService::Stub::AsyncBroadcastEquipmentChangeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::Equipment>::Create(channel_.get(), cq, rpcmethod_BroadcastEquipmentChange_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ProtoObject::Equipment>* GameService::Stub::PrepareAsyncBroadcastEquipmentChangeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::Equipment>::Create(channel_.get(), cq, rpcmethod_BroadcastEquipmentChange_, context, request, false, nullptr);
}

::grpc::ClientReader< ::ProtoObject::ResourceChange>* GameService::Stub::BroadcastMapResourceChangeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::ProtoObject::ResourceChange>::Create(channel_.get(), rpcmethod_BroadcastMapResourceChange_, context, request);
}

void GameService::Stub::async::BroadcastMapResourceChange(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::ProtoObject::ResourceChange>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ProtoObject::ResourceChange>::Create(stub_->channel_.get(), stub_->rpcmethod_BroadcastMapResourceChange_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ProtoObject::ResourceChange>* GameService::Stub::AsyncBroadcastMapResourceChangeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::ResourceChange>::Create(channel_.get(), cq, rpcmethod_BroadcastMapResourceChange_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ProtoObject::ResourceChange>* GameService::Stub::PrepareAsyncBroadcastMapResourceChangeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::ResourceChange>::Create(channel_.get(), cq, rpcmethod_BroadcastMapResourceChange_, context, request, false, nullptr);
}

::grpc::ClientReader< ::ProtoObject::MapTransition>* GameService::Stub::BroadcastMapTransitionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::ProtoObject::MapTransition>::Create(channel_.get(), rpcmethod_BroadcastMapTransition_, context, request);
}

void GameService::Stub::async::BroadcastMapTransition(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::ProtoObject::MapTransition>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ProtoObject::MapTransition>::Create(stub_->channel_.get(), stub_->rpcmethod_BroadcastMapTransition_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ProtoObject::MapTransition>* GameService::Stub::AsyncBroadcastMapTransitionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::MapTransition>::Create(channel_.get(), cq, rpcmethod_BroadcastMapTransition_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ProtoObject::MapTransition>* GameService::Stub::PrepareAsyncBroadcastMapTransitionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ProtoObject::MapTransition>::Create(channel_.get(), cq, rpcmethod_BroadcastMapTransition_, context, request, false, nullptr);
}

GameService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::ProtoObject::LoginInfo, ::ProtoObject::PlayerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ProtoObject::LoginInfo* req,
             ::ProtoObject::PlayerInfo* resp) {
               return service->TryLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::ProtoObject::LoginInfo, ::ProtoObject::PlayerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ProtoObject::LoginInfo* req,
             ::ProtoObject::PlayerInfo* resp) {
               return service->TryRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::ProtoObject::Nickname, ::ProtoObject::Nickname, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ProtoObject::Nickname* req,
             ::ProtoObject::Nickname* resp) {
               return service->SetNickname(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::ProtoObject::PlayerInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ProtoObject::PlayerInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->Save(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< GameService::Service, ::ProtoObject::Location, ::google::protobuf::Empty>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::ProtoObject::Location>* reader,
             ::google::protobuf::Empty* resp) {
               return service->SendLocation(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[5],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< GameService::Service, ::ProtoObject::RepBoolean, ::google::protobuf::Empty>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::ProtoObject::RepBoolean>* reader,
             ::google::protobuf::Empty* resp) {
               return service->SendRepBoolean(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::ProtoObject::Equipment, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ProtoObject::Equipment* req,
             ::google::protobuf::Empty* resp) {
               return service->SendEquipmentChange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::ProtoObject::ResourceChange, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ProtoObject::ResourceChange* req,
             ::google::protobuf::Empty* resp) {
               return service->SendMapResourceChange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GameService::Service, ::ProtoObject::MapTransition, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ProtoObject::MapTransition* req,
             ::google::protobuf::Empty* resp) {
               return service->SendMapTransition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GameService::Service, ::google::protobuf::Empty, ::ProtoObject::Location>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::ProtoObject::Location>* writer) {
               return service->BroadcastLocation(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GameService::Service, ::google::protobuf::Empty, ::ProtoObject::RepBoolean>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::ProtoObject::RepBoolean>* writer) {
               return service->BroadcastRepBoolean(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GameService::Service, ::google::protobuf::Empty, ::ProtoObject::Equipment>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::ProtoObject::Equipment>* writer) {
               return service->BroadcastEquipmentChange(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GameService::Service, ::google::protobuf::Empty, ::ProtoObject::ResourceChange>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::ProtoObject::ResourceChange>* writer) {
               return service->BroadcastMapResourceChange(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GameService_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GameService::Service, ::google::protobuf::Empty, ::ProtoObject::MapTransition>(
          [](GameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::ProtoObject::MapTransition>* writer) {
               return service->BroadcastMapTransition(ctx, req, writer);
             }, this)));
}

GameService::Service::~Service() {
}

::grpc::Status GameService::Service::TryLogin(::grpc::ServerContext* context, const ::ProtoObject::LoginInfo* request, ::ProtoObject::PlayerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::TryRegister(::grpc::ServerContext* context, const ::ProtoObject::LoginInfo* request, ::ProtoObject::PlayerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::SetNickname(::grpc::ServerContext* context, const ::ProtoObject::Nickname* request, ::ProtoObject::Nickname* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::Save(::grpc::ServerContext* context, const ::ProtoObject::PlayerInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::SendLocation(::grpc::ServerContext* context, ::grpc::ServerReader< ::ProtoObject::Location>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::SendRepBoolean(::grpc::ServerContext* context, ::grpc::ServerReader< ::ProtoObject::RepBoolean>* reader, ::google::protobuf::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::SendEquipmentChange(::grpc::ServerContext* context, const ::ProtoObject::Equipment* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::SendMapResourceChange(::grpc::ServerContext* context, const ::ProtoObject::ResourceChange* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::SendMapTransition(::grpc::ServerContext* context, const ::ProtoObject::MapTransition* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::BroadcastLocation(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::ProtoObject::Location>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::BroadcastRepBoolean(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::ProtoObject::RepBoolean>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::BroadcastEquipmentChange(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::ProtoObject::Equipment>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::BroadcastMapResourceChange(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::ProtoObject::ResourceChange>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GameService::Service::BroadcastMapTransition(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::ProtoObject::MapTransition>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ProtoObject

