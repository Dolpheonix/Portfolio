// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SaveObject.proto

#include "SaveObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SaveObject {
PROTOBUF_CONSTEXPR GameItem::GameItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_.num_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameItemDefaultTypeInternal() {}
  union {
    GameItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameItemDefaultTypeInternal _GameItem_default_instance_;
PROTOBUF_CONSTEXPR TypeInventory::TypeInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TypeInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeInventoryDefaultTypeInternal() {}
  union {
    TypeInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeInventoryDefaultTypeInternal _TypeInventory_default_instance_;
PROTOBUF_CONSTEXPR Inventory::Inventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.typeinventory_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InventoryDefaultTypeInternal() {}
  union {
    Inventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InventoryDefaultTypeInternal _Inventory_default_instance_;
PROTOBUF_CONSTEXPR QuestStatus_SubQuestStatus::QuestStatus_SubQuestStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.bstarted_)*/false
  , /*decltype(_impl_.bcompleted_)*/false
  , /*decltype(_impl_.curramount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuestStatus_SubQuestStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuestStatus_SubQuestStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuestStatus_SubQuestStatusDefaultTypeInternal() {}
  union {
    QuestStatus_SubQuestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuestStatus_SubQuestStatusDefaultTypeInternal _QuestStatus_SubQuestStatus_default_instance_;
PROTOBUF_CONSTEXPR QuestStatus::QuestStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.substatus_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.progresstype_)*/0
  , /*decltype(_impl_.currphase_)*/0u
  , /*decltype(_impl_.completed_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuestStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuestStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuestStatusDefaultTypeInternal() {}
  union {
    QuestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuestStatusDefaultTypeInternal _QuestStatus_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queststatus_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inventory_)*/nullptr
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.map_)*/0u
  , /*decltype(_impl_.loc_x_)*/0
  , /*decltype(_impl_.loc_y_)*/0
  , /*decltype(_impl_.gold_)*/uint64_t{0u}
  , /*decltype(_impl_.loc_z_)*/0
  , /*decltype(_impl_.slotindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
}  // namespace SaveObject
static ::_pb::Metadata file_level_metadata_SaveObject_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_SaveObject_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_SaveObject_2eproto = nullptr;

const uint32_t TableStruct_SaveObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaveObject::GameItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SaveObject::GameItem, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::GameItem, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaveObject::TypeInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SaveObject::TypeInventory, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::TypeInventory, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaveObject::Inventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SaveObject::Inventory, _impl_.typeinventory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus_SubQuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus_SubQuestStatus, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus_SubQuestStatus, _impl_.bstarted_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus_SubQuestStatus, _impl_.bcompleted_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus_SubQuestStatus, _impl_.curramount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus, _impl_.progresstype_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus, _impl_.substatus_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus, _impl_.currphase_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::QuestStatus, _impl_.completed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.loc_x_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.loc_y_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.loc_z_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.inventory_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.queststatus_),
  PROTOBUF_FIELD_OFFSET(::SaveObject::PlayerInfo, _impl_.slotindex_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SaveObject::GameItem)},
  { 8, -1, -1, sizeof(::SaveObject::TypeInventory)},
  { 16, -1, -1, sizeof(::SaveObject::Inventory)},
  { 23, -1, -1, sizeof(::SaveObject::QuestStatus_SubQuestStatus)},
  { 33, -1, -1, sizeof(::SaveObject::QuestStatus)},
  { 45, -1, -1, sizeof(::SaveObject::PlayerInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SaveObject::_GameItem_default_instance_._instance,
  &::SaveObject::_TypeInventory_default_instance_._instance,
  &::SaveObject::_Inventory_default_instance_._instance,
  &::SaveObject::_QuestStatus_SubQuestStatus_default_instance_._instance,
  &::SaveObject::_QuestStatus_default_instance_._instance,
  &::SaveObject::_PlayerInfo_default_instance_._instance,
};

const char descriptor_table_protodef_SaveObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020SaveObject.proto\022\nSaveObject\"&\n\010GameIt"
  "em\022\r\n\005index\030\001 \001(\004\022\013\n\003num\030\002 \001(\004\"B\n\rTypeIn"
  "ventory\022\014\n\004type\030\001 \001(\r\022#\n\005items\030\002 \003(\0132\024.S"
  "aveObject.GameItem\"j\n\tInventory\0220\n\rtypeI"
  "nventory\030\001 \003(\0132\031.SaveObject.TypeInventor"
  "y\"+\n\010ItemType\022\t\n\005CLOTH\020\000\022\n\n\006WEAPON\020\001\022\010\n\004"
  "ITEM\020\002\"\310\004\n\013QuestStatus\022\r\n\005index\030\001 \001(\r\022/\n"
  "\004type\030\002 \001(\0162!.SaveObject.QuestStatus.Que"
  "stType\022\?\n\014progressType\030\003 \001(\0162).SaveObjec"
  "t.QuestStatus.QuestProgressType\0229\n\tsubSt"
  "atus\030\004 \003(\0132&.SaveObject.QuestStatus.SubQ"
  "uestStatus\022\021\n\tcurrPhase\030\005 \001(\r\022\021\n\tcomplet"
  "ed\030\006 \001(\r\032\312\001\n\016SubQuestStatus\022A\n\004type\030\001 \001("
  "\01623.SaveObject.QuestStatus.SubQuestStatu"
  "s.SubQuestType\022\020\n\010bStarted\030\002 \001(\010\022\022\n\nbCom"
  "pleted\030\003 \001(\010\022\022\n\ncurrAmount\030\004 \001(\r\";\n\014SubQ"
  "uestType\022\013\n\007ARRIVAL\020\000\022\010\n\004HUNT\020\001\022\010\n\004ITEM\020"
  "\002\022\n\n\006ACTION\020\003\"%\n\tQuestType\022\n\n\006SERIAL\020\000\022\014"
  "\n\010PARALLEL\020\001\"c\n\021QuestProgressType\022\017\n\013UNA"
  "VAILABLE\020\000\022\r\n\tAVAILABLE\020\001\022\016\n\nINPROGRESS\020"
  "\002\022\017\n\013COMPLETABLE\020\003\022\r\n\tCOMPLETED\020\004\"\334\001\n\nPl"
  "ayerInfo\022\014\n\004name\030\001 \001(\t\022\r\n\005level\030\002 \001(\r\022\013\n"
  "\003map\030\003 \001(\r\022\r\n\005loc_x\030\004 \001(\002\022\r\n\005loc_y\030\005 \001(\002"
  "\022\r\n\005loc_z\030\006 \001(\002\022\014\n\004gold\030\007 \001(\004\022(\n\tinvento"
  "ry\030\010 \001(\0132\025.SaveObject.Inventory\022,\n\013quest"
  "Status\030\t \003(\0132\027.SaveObject.QuestStatus\022\021\n"
  "\tslotIndex\030\n \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_SaveObject_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SaveObject_2eproto = {
    false, false, 1064, descriptor_table_protodef_SaveObject_2eproto,
    "SaveObject.proto",
    &descriptor_table_SaveObject_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_SaveObject_2eproto::offsets,
    file_level_metadata_SaveObject_2eproto, file_level_enum_descriptors_SaveObject_2eproto,
    file_level_service_descriptors_SaveObject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SaveObject_2eproto_getter() {
  return &descriptor_table_SaveObject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SaveObject_2eproto(&descriptor_table_SaveObject_2eproto);
namespace SaveObject {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inventory_ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SaveObject_2eproto);
  return file_level_enum_descriptors_SaveObject_2eproto[0];
}
bool Inventory_ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Inventory_ItemType Inventory::CLOTH;
constexpr Inventory_ItemType Inventory::WEAPON;
constexpr Inventory_ItemType Inventory::ITEM;
constexpr Inventory_ItemType Inventory::ItemType_MIN;
constexpr Inventory_ItemType Inventory::ItemType_MAX;
constexpr int Inventory::ItemType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestStatus_SubQuestStatus_SubQuestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SaveObject_2eproto);
  return file_level_enum_descriptors_SaveObject_2eproto[1];
}
bool QuestStatus_SubQuestStatus_SubQuestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::ARRIVAL;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::HUNT;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::ITEM;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::ACTION;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::SubQuestType_MIN;
constexpr QuestStatus_SubQuestStatus_SubQuestType QuestStatus_SubQuestStatus::SubQuestType_MAX;
constexpr int QuestStatus_SubQuestStatus::SubQuestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestStatus_QuestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SaveObject_2eproto);
  return file_level_enum_descriptors_SaveObject_2eproto[2];
}
bool QuestStatus_QuestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QuestStatus_QuestType QuestStatus::SERIAL;
constexpr QuestStatus_QuestType QuestStatus::PARALLEL;
constexpr QuestStatus_QuestType QuestStatus::QuestType_MIN;
constexpr QuestStatus_QuestType QuestStatus::QuestType_MAX;
constexpr int QuestStatus::QuestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuestStatus_QuestProgressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SaveObject_2eproto);
  return file_level_enum_descriptors_SaveObject_2eproto[3];
}
bool QuestStatus_QuestProgressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr QuestStatus_QuestProgressType QuestStatus::UNAVAILABLE;
constexpr QuestStatus_QuestProgressType QuestStatus::AVAILABLE;
constexpr QuestStatus_QuestProgressType QuestStatus::INPROGRESS;
constexpr QuestStatus_QuestProgressType QuestStatus::COMPLETABLE;
constexpr QuestStatus_QuestProgressType QuestStatus::COMPLETED;
constexpr QuestStatus_QuestProgressType QuestStatus::QuestProgressType_MIN;
constexpr QuestStatus_QuestProgressType QuestStatus::QuestProgressType_MAX;
constexpr int QuestStatus::QuestProgressType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class GameItem::_Internal {
 public:
};

GameItem::GameItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SaveObject.GameItem)
}
GameItem::GameItem(const GameItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:SaveObject.GameItem)
}

inline void GameItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){uint64_t{0u}}
    , decltype(_impl_.num_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameItem::~GameItem() {
  // @@protoc_insertion_point(destructor:SaveObject.GameItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameItem::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveObject.GameItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveObject.GameItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // uint64 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveObject.GameItem)
  return target;
}

size_t GameItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveObject.GameItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // uint64 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameItem::GetClassData() const { return &_class_data_; }


void GameItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameItem*>(&to_msg);
  auto& from = static_cast<const GameItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SaveObject.GameItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameItem::CopyFrom(const GameItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveObject.GameItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameItem::IsInitialized() const {
  return true;
}

void GameItem::InternalSwap(GameItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameItem, _impl_.num_)
      + sizeof(GameItem::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(GameItem, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SaveObject_2eproto_getter, &descriptor_table_SaveObject_2eproto_once,
      file_level_metadata_SaveObject_2eproto[0]);
}

// ===================================================================

class TypeInventory::_Internal {
 public:
};

TypeInventory::TypeInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SaveObject.TypeInventory)
}
TypeInventory::TypeInventory(const TypeInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:SaveObject.TypeInventory)
}

inline void TypeInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TypeInventory::~TypeInventory() {
  // @@protoc_insertion_point(destructor:SaveObject.TypeInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void TypeInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveObject.TypeInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SaveObject.GameItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveObject.TypeInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .SaveObject.GameItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveObject.TypeInventory)
  return target;
}

size_t TypeInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveObject.TypeInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SaveObject.GameItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeInventory::GetClassData() const { return &_class_data_; }


void TypeInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeInventory*>(&to_msg);
  auto& from = static_cast<const TypeInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SaveObject.TypeInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeInventory::CopyFrom(const TypeInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveObject.TypeInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeInventory::IsInitialized() const {
  return true;
}

void TypeInventory::InternalSwap(TypeInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SaveObject_2eproto_getter, &descriptor_table_SaveObject_2eproto_once,
      file_level_metadata_SaveObject_2eproto[1]);
}

// ===================================================================

class Inventory::_Internal {
 public:
};

Inventory::Inventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SaveObject.Inventory)
}
Inventory::Inventory(const Inventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Inventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.typeinventory_){from._impl_.typeinventory_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SaveObject.Inventory)
}

inline void Inventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.typeinventory_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:SaveObject.Inventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Inventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.typeinventory_.~RepeatedPtrField();
}

void Inventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Inventory::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveObject.Inventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.typeinventory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Inventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SaveObject.TypeInventory typeInventory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_typeinventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Inventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveObject.Inventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SaveObject.TypeInventory typeInventory = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_typeinventory_size()); i < n; i++) {
    const auto& repfield = this->_internal_typeinventory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveObject.Inventory)
  return target;
}

size_t Inventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveObject.Inventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SaveObject.TypeInventory typeInventory = 1;
  total_size += 1UL * this->_internal_typeinventory_size();
  for (const auto& msg : this->_impl_.typeinventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Inventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Inventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Inventory::GetClassData() const { return &_class_data_; }


void Inventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Inventory*>(&to_msg);
  auto& from = static_cast<const Inventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SaveObject.Inventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.typeinventory_.MergeFrom(from._impl_.typeinventory_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Inventory::CopyFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveObject.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {
  return true;
}

void Inventory::InternalSwap(Inventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.typeinventory_.InternalSwap(&other->_impl_.typeinventory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SaveObject_2eproto_getter, &descriptor_table_SaveObject_2eproto_once,
      file_level_metadata_SaveObject_2eproto[2]);
}

// ===================================================================

class QuestStatus_SubQuestStatus::_Internal {
 public:
};

QuestStatus_SubQuestStatus::QuestStatus_SubQuestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SaveObject.QuestStatus.SubQuestStatus)
}
QuestStatus_SubQuestStatus::QuestStatus_SubQuestStatus(const QuestStatus_SubQuestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuestStatus_SubQuestStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.bstarted_){}
    , decltype(_impl_.bcompleted_){}
    , decltype(_impl_.curramount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curramount_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.curramount_));
  // @@protoc_insertion_point(copy_constructor:SaveObject.QuestStatus.SubQuestStatus)
}

inline void QuestStatus_SubQuestStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.bstarted_){false}
    , decltype(_impl_.bcompleted_){false}
    , decltype(_impl_.curramount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuestStatus_SubQuestStatus::~QuestStatus_SubQuestStatus() {
  // @@protoc_insertion_point(destructor:SaveObject.QuestStatus.SubQuestStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuestStatus_SubQuestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuestStatus_SubQuestStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuestStatus_SubQuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveObject.QuestStatus.SubQuestStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curramount_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.curramount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuestStatus_SubQuestStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SaveObject.QuestStatus.SubQuestStatus.SubQuestType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::SaveObject::QuestStatus_SubQuestStatus_SubQuestType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool bStarted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bstarted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bCompleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bcompleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 currAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.curramount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuestStatus_SubQuestStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveObject.QuestStatus.SubQuestStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SaveObject.QuestStatus.SubQuestStatus.SubQuestType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bool bStarted = 2;
  if (this->_internal_bstarted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_bstarted(), target);
  }

  // bool bCompleted = 3;
  if (this->_internal_bcompleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bcompleted(), target);
  }

  // uint32 currAmount = 4;
  if (this->_internal_curramount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_curramount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveObject.QuestStatus.SubQuestStatus)
  return target;
}

size_t QuestStatus_SubQuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveObject.QuestStatus.SubQuestStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SaveObject.QuestStatus.SubQuestStatus.SubQuestType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool bStarted = 2;
  if (this->_internal_bstarted() != 0) {
    total_size += 1 + 1;
  }

  // bool bCompleted = 3;
  if (this->_internal_bcompleted() != 0) {
    total_size += 1 + 1;
  }

  // uint32 currAmount = 4;
  if (this->_internal_curramount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_curramount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuestStatus_SubQuestStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuestStatus_SubQuestStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuestStatus_SubQuestStatus::GetClassData() const { return &_class_data_; }


void QuestStatus_SubQuestStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuestStatus_SubQuestStatus*>(&to_msg);
  auto& from = static_cast<const QuestStatus_SubQuestStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SaveObject.QuestStatus.SubQuestStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_bstarted() != 0) {
    _this->_internal_set_bstarted(from._internal_bstarted());
  }
  if (from._internal_bcompleted() != 0) {
    _this->_internal_set_bcompleted(from._internal_bcompleted());
  }
  if (from._internal_curramount() != 0) {
    _this->_internal_set_curramount(from._internal_curramount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuestStatus_SubQuestStatus::CopyFrom(const QuestStatus_SubQuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveObject.QuestStatus.SubQuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStatus_SubQuestStatus::IsInitialized() const {
  return true;
}

void QuestStatus_SubQuestStatus::InternalSwap(QuestStatus_SubQuestStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestStatus_SubQuestStatus, _impl_.curramount_)
      + sizeof(QuestStatus_SubQuestStatus::_impl_.curramount_)
      - PROTOBUF_FIELD_OFFSET(QuestStatus_SubQuestStatus, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestStatus_SubQuestStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SaveObject_2eproto_getter, &descriptor_table_SaveObject_2eproto_once,
      file_level_metadata_SaveObject_2eproto[3]);
}

// ===================================================================

class QuestStatus::_Internal {
 public:
};

QuestStatus::QuestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SaveObject.QuestStatus)
}
QuestStatus::QuestStatus(const QuestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuestStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.substatus_){from._impl_.substatus_}
    , decltype(_impl_.index_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.progresstype_){}
    , decltype(_impl_.currphase_){}
    , decltype(_impl_.completed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.completed_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.completed_));
  // @@protoc_insertion_point(copy_constructor:SaveObject.QuestStatus)
}

inline void QuestStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.substatus_){arena}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.progresstype_){0}
    , decltype(_impl_.currphase_){0u}
    , decltype(_impl_.completed_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuestStatus::~QuestStatus() {
  // @@protoc_insertion_point(destructor:SaveObject.QuestStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuestStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.substatus_.~RepeatedPtrField();
}

void QuestStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveObject.QuestStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.substatus_.Clear();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.completed_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.completed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuestStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SaveObject.QuestStatus.QuestType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::SaveObject::QuestStatus_QuestType>(val));
        } else
          goto handle_unusual;
        continue;
      // .SaveObject.QuestStatus.QuestProgressType progressType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_progresstype(static_cast<::SaveObject::QuestStatus_QuestProgressType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .SaveObject.QuestStatus.SubQuestStatus subStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_substatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 currPhase = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.currphase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuestStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveObject.QuestStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // .SaveObject.QuestStatus.QuestType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .SaveObject.QuestStatus.QuestProgressType progressType = 3;
  if (this->_internal_progresstype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_progresstype(), target);
  }

  // repeated .SaveObject.QuestStatus.SubQuestStatus subStatus = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_substatus_size()); i < n; i++) {
    const auto& repfield = this->_internal_substatus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 currPhase = 5;
  if (this->_internal_currphase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_currphase(), target);
  }

  // uint32 completed = 6;
  if (this->_internal_completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveObject.QuestStatus)
  return target;
}

size_t QuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveObject.QuestStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SaveObject.QuestStatus.SubQuestStatus subStatus = 4;
  total_size += 1UL * this->_internal_substatus_size();
  for (const auto& msg : this->_impl_.substatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // .SaveObject.QuestStatus.QuestType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .SaveObject.QuestStatus.QuestProgressType progressType = 3;
  if (this->_internal_progresstype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_progresstype());
  }

  // uint32 currPhase = 5;
  if (this->_internal_currphase() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currphase());
  }

  // uint32 completed = 6;
  if (this->_internal_completed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_completed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuestStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuestStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuestStatus::GetClassData() const { return &_class_data_; }


void QuestStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuestStatus*>(&to_msg);
  auto& from = static_cast<const QuestStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SaveObject.QuestStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.substatus_.MergeFrom(from._impl_.substatus_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_progresstype() != 0) {
    _this->_internal_set_progresstype(from._internal_progresstype());
  }
  if (from._internal_currphase() != 0) {
    _this->_internal_set_currphase(from._internal_currphase());
  }
  if (from._internal_completed() != 0) {
    _this->_internal_set_completed(from._internal_completed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuestStatus::CopyFrom(const QuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveObject.QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestStatus::IsInitialized() const {
  return true;
}

void QuestStatus::InternalSwap(QuestStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.substatus_.InternalSwap(&other->_impl_.substatus_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuestStatus, _impl_.completed_)
      + sizeof(QuestStatus::_impl_.completed_)
      - PROTOBUF_FIELD_OFFSET(QuestStatus, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuestStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SaveObject_2eproto_getter, &descriptor_table_SaveObject_2eproto_once,
      file_level_metadata_SaveObject_2eproto[4]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::SaveObject::Inventory& inventory(const PlayerInfo* msg);
};

const ::SaveObject::Inventory&
PlayerInfo::_Internal::inventory(const PlayerInfo* msg) {
  return *msg->_impl_.inventory_;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SaveObject.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queststatus_){from._impl_.queststatus_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.inventory_){nullptr}
    , decltype(_impl_.level_){}
    , decltype(_impl_.map_){}
    , decltype(_impl_.loc_x_){}
    , decltype(_impl_.loc_y_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.loc_z_){}
    , decltype(_impl_.slotindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inventory()) {
    _this->_impl_.inventory_ = new ::SaveObject::Inventory(*from._impl_.inventory_);
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slotindex_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.slotindex_));
  // @@protoc_insertion_point(copy_constructor:SaveObject.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queststatus_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.inventory_){nullptr}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.map_){0u}
    , decltype(_impl_.loc_x_){0}
    , decltype(_impl_.loc_y_){0}
    , decltype(_impl_.gold_){uint64_t{0u}}
    , decltype(_impl_.loc_z_){0}
    , decltype(_impl_.slotindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:SaveObject.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queststatus_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inventory_;
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveObject.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queststatus_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.inventory_ != nullptr) {
    delete _impl_.inventory_;
  }
  _impl_.inventory_ = nullptr;
  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.slotindex_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.slotindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SaveObject.PlayerInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float loc_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.loc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float loc_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.loc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float loc_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.loc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint64 gold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SaveObject.Inventory inventory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inventory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SaveObject.QuestStatus questStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queststatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 slotIndex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.slotindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveObject.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SaveObject.PlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 map = 3;
  if (this->_internal_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map(), target);
  }

  // float loc_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_x = this->_internal_loc_x();
  uint32_t raw_loc_x;
  memcpy(&raw_loc_x, &tmp_loc_x, sizeof(tmp_loc_x));
  if (raw_loc_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_loc_x(), target);
  }

  // float loc_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_y = this->_internal_loc_y();
  uint32_t raw_loc_y;
  memcpy(&raw_loc_y, &tmp_loc_y, sizeof(tmp_loc_y));
  if (raw_loc_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_loc_y(), target);
  }

  // float loc_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_z = this->_internal_loc_z();
  uint32_t raw_loc_z;
  memcpy(&raw_loc_z, &tmp_loc_z, sizeof(tmp_loc_z));
  if (raw_loc_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_loc_z(), target);
  }

  // uint64 gold = 7;
  if (this->_internal_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gold(), target);
  }

  // .SaveObject.Inventory inventory = 8;
  if (this->_internal_has_inventory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inventory(this),
        _Internal::inventory(this).GetCachedSize(), target, stream);
  }

  // repeated .SaveObject.QuestStatus questStatus = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queststatus_size()); i < n; i++) {
    const auto& repfield = this->_internal_queststatus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 slotIndex = 10;
  if (this->_internal_slotindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_slotindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveObject.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveObject.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SaveObject.QuestStatus questStatus = 9;
  total_size += 1UL * this->_internal_queststatus_size();
  for (const auto& msg : this->_impl_.queststatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .SaveObject.Inventory inventory = 8;
  if (this->_internal_has_inventory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inventory_);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 map = 3;
  if (this->_internal_map() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map());
  }

  // float loc_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_x = this->_internal_loc_x();
  uint32_t raw_loc_x;
  memcpy(&raw_loc_x, &tmp_loc_x, sizeof(tmp_loc_x));
  if (raw_loc_x != 0) {
    total_size += 1 + 4;
  }

  // float loc_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_y = this->_internal_loc_y();
  uint32_t raw_loc_y;
  memcpy(&raw_loc_y, &tmp_loc_y, sizeof(tmp_loc_y));
  if (raw_loc_y != 0) {
    total_size += 1 + 4;
  }

  // uint64 gold = 7;
  if (this->_internal_gold() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gold());
  }

  // float loc_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_z = this->_internal_loc_z();
  uint32_t raw_loc_z;
  memcpy(&raw_loc_z, &tmp_loc_z, sizeof(tmp_loc_z));
  if (raw_loc_z != 0) {
    total_size += 1 + 4;
  }

  // uint32 slotIndex = 10;
  if (this->_internal_slotindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slotindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SaveObject.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.queststatus_.MergeFrom(from._impl_.queststatus_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_inventory()) {
    _this->_internal_mutable_inventory()->::SaveObject::Inventory::MergeFrom(
        from._internal_inventory());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_map() != 0) {
    _this->_internal_set_map(from._internal_map());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_x = from._internal_loc_x();
  uint32_t raw_loc_x;
  memcpy(&raw_loc_x, &tmp_loc_x, sizeof(tmp_loc_x));
  if (raw_loc_x != 0) {
    _this->_internal_set_loc_x(from._internal_loc_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_y = from._internal_loc_y();
  uint32_t raw_loc_y;
  memcpy(&raw_loc_y, &tmp_loc_y, sizeof(tmp_loc_y));
  if (raw_loc_y != 0) {
    _this->_internal_set_loc_y(from._internal_loc_y());
  }
  if (from._internal_gold() != 0) {
    _this->_internal_set_gold(from._internal_gold());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_loc_z = from._internal_loc_z();
  uint32_t raw_loc_z;
  memcpy(&raw_loc_z, &tmp_loc_z, sizeof(tmp_loc_z));
  if (raw_loc_z != 0) {
    _this->_internal_set_loc_z(from._internal_loc_z());
  }
  if (from._internal_slotindex() != 0) {
    _this->_internal_set_slotindex(from._internal_slotindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveObject.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.queststatus_.InternalSwap(&other->_impl_.queststatus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.slotindex_)
      + sizeof(PlayerInfo::_impl_.slotindex_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.inventory_)>(
          reinterpret_cast<char*>(&_impl_.inventory_),
          reinterpret_cast<char*>(&other->_impl_.inventory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SaveObject_2eproto_getter, &descriptor_table_SaveObject_2eproto_once,
      file_level_metadata_SaveObject_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SaveObject
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SaveObject::GameItem*
Arena::CreateMaybeMessage< ::SaveObject::GameItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveObject::GameItem >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveObject::TypeInventory*
Arena::CreateMaybeMessage< ::SaveObject::TypeInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveObject::TypeInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveObject::Inventory*
Arena::CreateMaybeMessage< ::SaveObject::Inventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveObject::Inventory >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveObject::QuestStatus_SubQuestStatus*
Arena::CreateMaybeMessage< ::SaveObject::QuestStatus_SubQuestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveObject::QuestStatus_SubQuestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveObject::QuestStatus*
Arena::CreateMaybeMessage< ::SaveObject::QuestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveObject::QuestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveObject::PlayerInfo*
Arena::CreateMaybeMessage< ::SaveObject::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveObject::PlayerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
